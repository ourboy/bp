name: Build and Test BP Calculator

on:
  push:
    branches:
      # - master
      - '*'  # Run on all Branches  
  pull_request:
    branches:
        - '*'
jobs:
  build_and_unit_test:
    name: build and run unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0'
      - name: Build, Run Unit tests, Generate code coverage
        run: | 
          dotnet build -c Release
          dotnet test bpUnitTestProject/bpUnitTestProject.csproj --collect "XPlat Code coverage"
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator -reports:"./bpUnitTestProject/TestResults/*/coverage.cobertura.xml" -targetdir:"./bpUnitTestProject/coverage-report" -reporttypes:Html

      - name: Publish test results and code coverage
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage
          path: ./bpUnitTestProject/TestResults/

      - name: Upload code coverage HTML report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-html-report
          path: ./bpUnitTestProject/coverage-report/
          retention-days: 30
  
  trigger_sonar_scan:
    name: Trigger SonarCloud Scan
    runs-on: ubuntu-latest
    needs: build_and_unit_test
    steps:
      - name: Trigger SonarCloud Scan Workflow
        uses: peter-evans/workflow-dispatch@v1
        with:
          workflow: sonar_scan.yml
          ref: ${{ github.ref }}
  
  deploy:
    name: Deploy to Azure Web App
    runs-on: ubuntu-latest
    needs: build_and_unit_test  # Ensures deployment runs only if build and tests pass
    environment:
      name: Test
      url: test-bpcalculator.azurewebsites.net
    env: 
      AZURE_WEBAPP_NAME: test-bpcalculator
      AZURE_WEBAPP_PACKAGE_PATH: 'publish'
    steps:
      - uses: actions/checkout@v4
      
      # publish web app 
      - name: Publish web app
        run: dotnet publish -c Release -o ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp
      
      # Deploy to Azure app service
      - name: Run Azure webapp deploy action using publish profile credentials
        uses: azure/webapps-deploy@v2
        with: 
          app-name: ${{ env.AZURE_WEBAPP_NAME }}                            
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          # slot-name: staging TODO-Remove: Not available on free accounts
          package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp'
      
      # Log in to Azure
      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}


  playwright_tests:
    name: Run Playwright Tests
    runs-on: ubuntu-latest
    needs: deploy # Ensures tests run only after deployment completes successfully
    steps: 
      - uses: actions/checkout@v4

      # Run Playwright end to end tests
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      # Install dependencies and Playwright
      - name: Install dependencies and Playwright
        run: |
          npm ci
          npx playwright install --with-deps
      
      # Run Playwright tests
      - name: Run Playwright tests
        run: |
          npx playwright test
        env:
          BASE_URL: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
      
      # Upload Playwright report
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
    
      # Log in to Azure
      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

  performance_tests:
    name: k6 Performance tests
    runs-on: ubuntu-latest
    needs: playwright_tests
    steps:
      - uses: actions/checkout@v4

      # Pull Docker image for k6
      - name: Pull Docker image for k6
        run: docker pull grafana/k6
  
      # Run k6 load test and capture report
      - name: Run k6 load test, capture report
        run: docker run -v $GITHUB_WORKSPACE:/mnt/k6 -i grafana/k6 run /mnt/k6/bpK6Performance/latencyTest.js > k6LatencyReport.txt
  
       # Upload k6 report  
      - uses: actions/upload-artifact@v4
        with:
          name: k6report
          path: k6LatencyReport.txt
          retention-days: 30

